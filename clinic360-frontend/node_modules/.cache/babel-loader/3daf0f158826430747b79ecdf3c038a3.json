{"ast":null,"code":"var _jsxFileName = \"D:\\\\clinic360\\\\clinic360-frontend\\\\src\\\\components\\\\PatientDashboard.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nconst PatientDashboard = () => {\n  const [records, setRecords] = useState([]);\n  const token = localStorage.getItem(\"accessToken\");\n  const patientId = localStorage.getItem(\"patientId\");\n  useEffect(() => {\n    if (patientId) {\n      axios.get(`http://localhost:8000/view-records/${patientId}/`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        setRecords(response.data);\n      }).catch(err => {\n        console.error(\"Error fetching records:\", err);\n      });\n    }\n  }, [patientId, token]);\n  const handleBookAppointment = async () => {\n    try {\n      // Replace \"doctor-uuid-placeholder\" with a valid doctor UUID from your system.\n      const appointmentData = {\n        doctor_id: \"doctor-uuid-placeholder\",\n        appointment_time: new Date().toISOString()\n      };\n      const response = await axios.post(\"http://localhost:8000/book-appointment/\", appointmentData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"Appointment booked successfully!\");\n    } catch (err) {\n      console.error(\"Error booking appointment:\", err);\n      alert(\"Error booking appointment.\");\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Patient Dashboard\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleBookAppointment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Book Appointment\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Medical Records\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, records && records.length > 0 ? records.map(record => /*#__PURE__*/React.createElement(\"li\", {\n    key: record.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, record.record_details)) : /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"No records found.\")));\n};\nexport default PatientDashboard;","map":{"version":3,"names":["React","useEffect","useState","axios","PatientDashboard","records","setRecords","token","localStorage","getItem","patientId","get","headers","Authorization","then","response","data","catch","err","console","error","handleBookAppointment","appointmentData","doctor_id","appointment_time","Date","toISOString","post","alert","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","record","key","id","record_details"],"sources":["D:/clinic360/clinic360-frontend/src/components/PatientDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst PatientDashboard = () => {\r\n  const [records, setRecords] = useState([]);\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  const patientId = localStorage.getItem(\"patientId\");\r\n\r\n  useEffect(() => {\r\n    if (patientId) {\r\n      axios.get(`http://localhost:8000/view-records/${patientId}/`, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      })\r\n      .then((response) => {\r\n        setRecords(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error fetching records:\", err);\r\n      });\r\n    }\r\n  }, [patientId, token]);\r\n\r\n  const handleBookAppointment = async () => {\r\n    try {\r\n      // Replace \"doctor-uuid-placeholder\" with a valid doctor UUID from your system.\r\n      const appointmentData = {\r\n        doctor_id: \"doctor-uuid-placeholder\",\r\n        appointment_time: new Date().toISOString()\r\n      };\r\n\r\n      const response = await axios.post(\"http://localhost:8000/book-appointment/\", appointmentData, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n      alert(\"Appointment booked successfully!\");\r\n    } catch (err) {\r\n      console.error(\"Error booking appointment:\", err);\r\n      alert(\"Error booking appointment.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Patient Dashboard</h2>\r\n      <button onClick={handleBookAppointment}>Book Appointment</button>\r\n      <h3>Medical Records</h3>\r\n      <ul>\r\n        {records && records.length > 0 ? (\r\n          records.map(record => (\r\n            <li key={record.id}>{record.record_details}</li>\r\n          ))\r\n        ) : (\r\n          <li>No records found.</li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}